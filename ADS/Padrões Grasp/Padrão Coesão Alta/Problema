/// dividir a complexididade de um programa
/// classe com responsabilidades focadas e relacionadas
/// foco e clareza
/// cada classe com proposito definido
/// divisao adequada de classe com muitas funções
/// facilidade de manutenção de codigo
/// mais reutilizavel
/// redução de erros
/// pode aumentar a complexidade se dividir uma classe em muitas calasse demeccesssarkks   
/// separação correta de classes
/// refatoração - teste unitario - documentacao - revisão de codigo
/// design claro, modular e definido

public class Utils{
    public String formataData(Date data);{
    //implementação da formatação de data no formato
    }
    public double converterMetrosEmPolegadas(double metros) {
        //implementação da conversao de metros em polegadas
    }
    public double converterPolegadasEmMetros( double polegadas){
        // implementacao da conversao de polegadas em metros
    }
    public void enviarArquivoPorFTP (File arquivo, String endereco) {
        // implementacao do envio de arquivo ft
    }
}